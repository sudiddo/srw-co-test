{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","palindromeWord","setPalindromeWord","palindromeResult","setPalindromeResult","sortedNumArray","setSortedNumArray","diySortedNumArray","setDiySortedNumArray","diySortedNumArrayResult","setDiySortedNumArrayResult","diySortedErrorMessage","setDiySortedErrorMessage","symDiffResult","setSymDiffResult","numArray","symDiffA","symDiffB","diyDiffSymA","setDiyDiffSymA","diyDiffSymB","setDiyDiffSymB","diySymDiffResult","setDiySymDiffResult","symDiff","sets","result","isDIY","arguments","args","Array","prototype","slice","call","forEach","arr","push","Set","array","arrayIndex","item","found","setIndex","length","has","className","onSubmit","e","preventDefault","lowRegStr","toLowerCase","replace","reverseStr","split","reverse","join","placeholder","type","value","onChange","target","sort","a","b","isValid","test","console","log","map","parseInt","style","color","marginTop","marginBottom","aIsValid","bIsValid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d7d4e95.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [palindromeWord, setPalindromeWord] = useState(\"\");\n  const [palindromeResult, setPalindromeResult] = useState(\"\");\n  const [sortedNumArray, setSortedNumArray] = useState([]);\n  const [diySortedNumArray, setDiySortedNumArray] = useState(\"\");\n  const [diySortedNumArrayResult, setDiySortedNumArrayResult] = useState([]);\n  const [diySortedErrorMessage, setDiySortedErrorMessage] = useState(\"\");\n  const [symDiffResult, setSymDiffResult] = useState([]);\n  const numArray = [3, 4, 5, 1, 2];\n  const symDiffA = [1, 2, 3, 4, 5];\n  const symDiffB = [3, 4, 8, 7];\n  const [diyDiffSymA, setDiyDiffSymA] = useState(\"\");\n  const [diyDiffSymB, setDiyDiffSymB] = useState(\"\");\n  const [diySymDiffResult, setDiySymDiffResult] = useState([]);\n\n  const checkPalindrome = (e) => {\n    e.preventDefault();\n    const re = /[\\W_]/g;\n\n    const lowRegStr = palindromeWord.toLowerCase().replace(re, \"\");\n\n    const reverseStr = lowRegStr.split(\"\").reverse().join(\"\");\n\n    if (reverseStr === lowRegStr) {\n      setPalindromeResult(\"It is a palindrome\");\n    } else {\n      setPalindromeResult(\"It is not a palindrome\");\n    }\n  };\n\n  const sortAscending = (e) => {\n    e.preventDefault();\n    const sort = numArray.sort((a, b) => a - b);\n    setSortedNumArray(sort);\n  };\n\n  const sortDIYAscending = (e) => {\n    e.preventDefault();\n    const isValid = /^[0-9,.]*$/.test(diySortedNumArray);\n    console.log(\"regex\", isValid);\n    if (isValid) {\n      const split = diySortedNumArray.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      const sort = split.sort((a, b) => a - b);\n\n      setDiySortedNumArrayResult(sort);\n    } else {\n      setDiySortedErrorMessage(\"Please only input number and comma\");\n    }\n  };\n\n  function symDiff() {\n    const sets = [],\n      result = [];\n    const isDIY = arguments[0];\n    const args = Array.prototype.slice.call(arguments, 1);\n    args.forEach(function (arr) {\n      sets.push(new Set(arr));\n    });\n\n    args.forEach(function (array, arrayIndex) {\n      array.forEach(function (item) {\n        let found = false;\n        for (var setIndex = 0; setIndex < sets.length; setIndex++) {\n          if (setIndex !== arrayIndex) {\n            if (sets[setIndex].has(item)) {\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) {\n          result.push(item);\n        }\n      });\n    });\n    if (isDIY) {\n      setDiySymDiffResult(result);\n    } else {\n      setSymDiffResult(result);\n    }\n  }\n\n  const SymDiffCount = (e) => {\n    e.preventDefault();\n\n    symDiff(false, symDiffA, symDiffB);\n  };\n\n  const DiySymDiffCount = (e) => {\n    e.preventDefault();\n    const aIsValid = /^[0-9,.]*$/.test(diyDiffSymA);\n    const bIsValid = /^[0-9,.]*$/.test(diyDiffSymB);\n    if (aIsValid && bIsValid) {\n      const splitA = diyDiffSymA.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      const splitB = diyDiffSymB.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      symDiff(true, splitA, splitB);\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-600 text-white\">\n      <header>\n        <h1 className=\"p-12 text-white text-center font-bold text-4xl\">{`SRW&Co Technical Test`}</h1>\n      </header>\n      <main className=\"justify-center\">\n        <div className=\"grid lg:grid-cols-3 grid-rows-2 gap-3 mx-2 lg:pb-0 pb-28\">\n          <div>\n            <form\n              className=\"bg-red-900 py-6 lg:px-5 px-3 h-full w-full rounded-md\"\n              onSubmit={checkPalindrome}\n            >\n              <h3 className=\"text-xl\">1. Palindrome Test</h3>\n              <div>\n                Enter words:\n                <input\n                  placeholder=\"Example race car\"\n                  className=\"bg-gray-200 ml-3 rounded-md py-1 text-black mt-5 px-1\"\n                  type=\"text\"\n                  value={palindromeWord}\n                  onChange={(e) => setPalindromeWord(e.target.value)}\n                />\n              </div>\n              <input\n                className=\"bg-gray-200 float-right rounded-md text-black mt-5 px-3 py-1\"\n                type=\"submit\"\n                value=\"Submit Palindrome\"\n              />\n            </form>\n            {palindromeResult !== \"\" ? (\n              <div className=\"mt-5 border border-white px-5 py-2 rounded-md text-l\">\n                {palindromeResult}\n              </div>\n            ) : null}\n          </div>\n          <div className=\"flex flex-col justify-start \">\n            <div className=\"bg-gray-900 h-full lg:px-10 px-5 py-6 rounded-md\">\n              <form onSubmit={sortAscending}>\n                <h3 className=\"text-xl\">2. Sort Ascending</h3>\n                <div className=\"text-center mt-5\">{`[${numArray}] = [${sortedNumArray}]`}</div>\n                <input\n                  className=\"bg-gray-200  float-right rounded-md text-black mt-5 px-5 py-1\"\n                  type=\"submit\"\n                  value=\"Sort\"\n                />\n              </form>\n\n              <form\n                className=\"border border-white p-3 mt-20 rounded-md\"\n                onSubmit={sortDIYAscending}\n              >\n                <h5> Input your own number! (please seperate with comma)</h5>\n                <div>\n                  <div>\n                    <input\n                      placeholder=\"Example 7,3,4,5\"\n                      className=\"bg-gray-200 rounded-md py-1 text-black mt-5 px-1 lg:w-56 w-36\"\n                      type=\"text\"\n                      value={diySortedNumArray}\n                      onChange={(e) => setDiySortedNumArray(e.target.value)}\n                    />\n                    {` = [${diySortedNumArrayResult}]`}\n                  </div>\n                </div>\n                <div className=\"flex justify-end\">\n                  <input\n                    className=\"bg-gray-200 mt-5 rounded-md text-black px-5 py-1\"\n                    type=\"submit\"\n                    value=\"Sort\"\n                  />\n                </div>\n                <div style={{ color: \"red\", marginTop: 5 }}>\n                  {diySortedErrorMessage}\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className=\" flex flex-col justify-start \">\n            <div className=\"bg-red-900 py-6 px-3 rounded-md\">\n              <h3 className=\"text-xl\">3. Symmetric Difference</h3>\n              <form\n                style={{ marginTop: 10, marginBottom: 20 }}\n                onSubmit={SymDiffCount}\n              >\n                <div>{`Array 1: ${symDiffA}`}</div>\n                <div>{`Array 2: ${symDiffB}`}</div>\n                <div>{`Symmetric Difference: ${symDiffResult}`}</div>\n                <input\n                  className=\"bg-gray-200 float-right rounded-md text-black mt-5 px-5 py-1\"\n                  type=\"submit\"\n                  value=\"Calculate\"\n                />\n              </form>\n              <form className=\"mt-20\" onSubmit={DiySymDiffCount}>\n                <h5> Input your own number! (please seperate with comma)</h5>\n                <div>\n                  {`Array 1: `}\n                  <input\n                    placeholder=\"Example 7,3,4,5\"\n                    className=\"bg-gray-200 ml-3 rounded-md py-1 text-black mt-5 px-1\"\n                    type=\"text\"\n                    value={diyDiffSymA}\n                    onChange={(e) => setDiyDiffSymA(e.target.value)}\n                  />\n                </div>\n                <div>\n                  {`Array 2: `}\n                  <input\n                    placeholder=\"Example 7,3,4,5\"\n                    className=\"bg-gray-200 ml-3 rounded-md py-1 text-black mt-5 px-1\"\n                    type=\"text\"\n                    value={diyDiffSymB}\n                    onChange={(e) => setDiyDiffSymB(e.target.value)}\n                  />\n                </div>\n                <div\n                  style={{ marginTop: 10 }}\n                >{`Symmetric Difference: ${diySymDiffResult}`}</div>\n                <input\n                  className=\"bg-gray-200 float-right rounded-md text-black mt-5 px-5 py-1\"\n                  type=\"submit\"\n                  value=\"Calculate\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}