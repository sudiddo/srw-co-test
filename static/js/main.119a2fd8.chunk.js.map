{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","palindromeWord","setPalindromeWord","palindromeResult","setPalindromeResult","sortedNumArray","setSortedNumArray","symDiffResult","setSymDiffResult","numArray","symDiffA","symDiffB","className","onSubmit","e","preventDefault","lowRegStr","toLowerCase","replace","reverseStr","split","reverse","join","style","marginTop","marginBottom","type","value","onChange","target","sort","a","b","sets","result","args","Array","prototype","slice","call","arguments","forEach","arr","push","Set","array","arrayIndex","item","found","setIndex","length","has","symDiff","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA6GeA,MA1Gf,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACNC,EADM,KACUC,EADV,OAEmCF,mBAAS,IAF5C,mBAENG,EAFM,KAEYC,EAFZ,OAG+BJ,mBAAS,IAHxC,mBAGNK,EAHM,KAGUC,EAHV,OAI6BN,mBAAS,IAJtC,mBAINO,EAJM,KAISC,EAJT,KAKPC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,EAAW,CAAC,EAAG,EAAG,EAAG,GAwD3B,OACE,qBAAKC,UAAU,MAAf,SACE,+BACE,gCACE,uBAAMC,SA1DU,SAACC,GACvBA,EAAEC,iBACF,IAEIC,EAAYf,EAAegB,cAAcC,QAFpC,SAEgD,IAErDC,EAAaH,EAAUI,MAAM,IAAIC,UAAUC,KAAK,IAGlDlB,EADEe,IAAeH,EACG,qBAEA,2BA+ChB,UACE,qBAAKO,MAAO,CAAEC,UAAW,GAAIC,aAAc,IAA3C,gCAGA,kDAEE,uBACEC,KAAK,OACLC,MAAO1B,EACP2B,SAAU,SAACd,GAAD,OAAOZ,EAAkBY,EAAEe,OAAOF,UAE9C,uBAAOD,KAAK,SAASC,MAAM,iBAG/B,8BAAMxB,IACN,qBAAKoB,MAAO,CAAEC,UAAW,GAAIC,aAAc,IAA3C,SACE,uBAAMZ,SA3DM,SAACC,GACrBA,EAAEC,iBACF,IAAMe,EAAOrB,EAASqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACzC1B,EAAkBwB,IAwDV,8BAEE,qBACEP,MAAO,CAAEC,UAAW,IADtB,oBAEMf,EAFN,gBAEsBJ,EAFtB,OAGA,uBAAOkB,MAAO,CAAEC,UAAW,GAAKE,KAAK,SAASC,MAAM,gBAGxD,sBAAKJ,MAAO,CAAEC,UAAW,IAAzB,oCAEE,uBAAMD,MAAO,CAAEC,UAAW,IAAMX,SApCrB,SAACC,GACpBA,EAAEC,iBA5BJ,WACE,IAAIkB,EAAO,GACTC,EAAS,GACPC,EAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GACjDL,EAAKM,SAAQ,SAAUC,GACrBT,EAAKU,KAAK,IAAIC,IAAIF,OAGpBP,EAAKM,SAAQ,SAAUI,EAAOC,GAC5BD,EAAMJ,SAAQ,SAAUM,GAEtB,IADA,IAAIC,GAAQ,EACHC,EAAW,EAAGA,EAAWhB,EAAKiB,OAAQD,IAC7C,GAAIA,IAAaH,GACXb,EAAKgB,GAAUE,IAAIJ,GAAO,CAC5BC,GAAQ,EACR,MAIDA,GACHd,EAAOS,KAAKI,SAIlBvC,EAAiB0B,GAMjBkB,CAAQ1C,EAAUC,IAiCV,UACE,iDAAkBD,KAClB,iDAAkBC,KAClB,8DAA+BJ,KAC/B,uBAAOgB,MAAO,CAAEC,UAAW,IAAME,KAAK,SAASC,MAAM,yBCxFpD0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.119a2fd8.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [palindromeWord, setPalindromeWord] = useState(\"\");\n  const [palindromeResult, setPalindromeResult] = useState(\"\");\n  const [sortedNumArray, setSortedNumArray] = useState([]);\n  const [symDiffResult, setSymDiffResult] = useState([]);\n  const numArray = [3, 4, 5, 1, 2];\n  const symDiffA = [1, 2, 3, 4, 5];\n  const symDiffB = [3, 4, 8, 7];\n\n  const checkPalindrome = (e) => {\n    e.preventDefault();\n    var re = /[\\W_]/g;\n\n    var lowRegStr = palindromeWord.toLowerCase().replace(re, \"\");\n\n    var reverseStr = lowRegStr.split(\"\").reverse().join(\"\");\n\n    if (reverseStr === lowRegStr) {\n      setPalindromeResult(\"It is a palindrome\");\n    } else {\n      setPalindromeResult(\"It is not a palindrome\");\n    }\n  };\n\n  const sortAscending = (e) => {\n    e.preventDefault();\n    const sort = numArray.sort((a, b) => a - b);\n    setSortedNumArray(sort);\n  };\n\n  function symDiff() {\n    var sets = [],\n      result = [];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args.forEach(function (arr) {\n      sets.push(new Set(arr));\n    });\n\n    args.forEach(function (array, arrayIndex) {\n      array.forEach(function (item) {\n        var found = false;\n        for (var setIndex = 0; setIndex < sets.length; setIndex++) {\n          if (setIndex !== arrayIndex) {\n            if (sets[setIndex].has(item)) {\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) {\n          result.push(item);\n        }\n      });\n    });\n    setSymDiffResult(result);\n  }\n\n  const SymDiffCount = (e) => {\n    e.preventDefault();\n\n    symDiff(symDiffA, symDiffB);\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div>\n          <form onSubmit={checkPalindrome}>\n            <div style={{ marginTop: 50, marginBottom: 10 }}>\n              1. Palindrome Test\n            </div>\n            <div>\n              Enter a string:\n              <input\n                type=\"text\"\n                value={palindromeWord}\n                onChange={(e) => setPalindromeWord(e.target.value)}\n              />\n              <input type=\"submit\" value=\"submit\" />\n            </div>\n          </form>\n          <div>{palindromeResult}</div>\n          <div style={{ marginTop: 40, marginBottom: 10 }}>\n            <form onSubmit={sortAscending}>\n              2. Sort Ascending\n              <div\n                style={{ marginTop: 10 }}\n              >{`[${numArray}] = [${sortedNumArray}]`}</div>\n              <input style={{ marginTop: 5 }} type=\"submit\" value=\"submit\" />\n            </form>\n          </div>\n          <div style={{ marginTop: 30 }}>\n            3. Symmetric Difference\n            <form style={{ marginTop: 10 }} onSubmit={SymDiffCount}>\n              <div>{`Array 1: ${symDiffA}`}</div>\n              <div>{`Array 2: ${symDiffB}`}</div>\n              <div>{`Symmetric Difference: ${symDiffResult}`}</div>\n              <input style={{ marginTop: 10 }} type=\"submit\" value=\"submit\" />\n            </form>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}